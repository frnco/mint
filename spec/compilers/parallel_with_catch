module Promise {
  fun reject (input : a) : Promise(a, b) {
    ``
  }
}

component Main {
  fun test : Promise(Never, String) {
    parallel {
      greeting =
        Promise.reject("x")

      b =
        Promise.reject("y")

      a =
        Promise.reject(0)
    } then {
      "blah"
    } catch String => a {
      "hello"
    } catch Number => a {
      "asd"
    }
  }

  fun render : String {
    test()

    ""
  }
}
--------------------------------------------------------------------------------
const B = new(class extends _M {
  b(h) {
    return;
  }
});

class A extends _C {
  a() {
    return (async () => {
      let _ = null;

      try {
        let d = null;
        let e = null;
        let g = null;

        await Promise.all([
          (async () => {
            try {
              d = await B.b(`x`)
            } catch (_error) {
              let c = _error;
              _ = `hello`;
              throw new DoError();
            }
          })(),
          (async () => {
            try {
              e = await B.b(`y`)
            } catch (_error) {
              let c = _error;
              _ = `hello`;
              throw new DoError();
            }
          })(),
          (async () => {
            try {
              g = await B.b(0)
            } catch (_error) {
              let f = _error;
              _ = `asd`;
              throw new DoError();
            }
          })()
        ]);

        _ = `blah`;
      } catch (_error) {
        if (!(_error instanceof DoError)) {
          console.warn(`Unhandled error in parallel expression:`);
          console.warn(_error);
        }
      };

      return _;
    })();
  }

  render() {
    this.a();
    return ``;
  }
};

A.displayName = "Main";
