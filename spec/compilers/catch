module Promise {
  fun reject (input : a) : Promise(a, b) {
    ``
  }
}

component Main {
  fun test : Promise(Never, Void) {
    sequence {
      greeting =
        Promise.reject("hello")

      void
    } catch String => a {
      void
    }
  }

  fun render : String {
    test()

    ""
  }
}
--------------------------------------------------------------------------------
const B = new(class extends _M {
  b(e) {
    return;
  }
});

class A extends _C {
  a() {
    return (async () => {
      let _ = null;

      try {
        let d = await (async () => {
          try {
            return await B.b(`hello`)
          } catch (_error) {
            let c = _error;
            _ = null;
            throw new DoError();
          }
        })();

        _ = await null;
      } catch (_error) {
        if (!(_error instanceof DoError)) {
          console.warn(`Unhandled error in sequence expression:`);
          console.warn(_error);
        }
      };

      return _;
    })();
  }

  render() {
    this.a();
    return ``;
  }
};

A.displayName = "Main";
