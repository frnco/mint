module Promise {
  fun reject (input : a) : Promise(a, b) {
    ``
  }
}

component Main {
  fun test : Promise(Never, String) {
    sequence {
      greeting =
        Promise.reject("x")

      b =
        Promise.reject("y")

      a =
        Promise.reject(0)

      "blah"
    } catch String => a {
      a
    } catch Number => a {
      "asd"
    }
  }

  fun render : Html {
    test()

    <div/>
  }
}
--------------------------------------------------------------------------------
const B = new(class extends _M {
  b(h) {
    return;
  }
});

class A extends _C {
  a() {
    return (async () => {
      let _ = null;

      try {
        let d = await (async () => {
          try {
            return await B.b(`x`)
          } catch (_error) {
            let c = _error;
            _ = c;
            throw new DoError();
          }
        })();

        let e = await (async () => {
          try {
            return await B.b(`y`)
          } catch (_error) {
            let c = _error;
            _ = c;
            throw new DoError();
          }
        })();

        let g = await (async () => {
          try {
            return await B.b(0)
          } catch (_error) {
            let f = _error;
            _ = `asd`;
            throw new DoError();
          }
        })();

        _ = await `blah`;
      } catch (_error) {
        if (!(_error instanceof DoError)) {
          console.warn(`Unhandled error in sequence expression:`);
          console.warn(_error);
        }
      };

      return _;
    })();
  }

  render() {
    this.a();
    return _h("div", {});
  }
};

A.displayName = "Main";
