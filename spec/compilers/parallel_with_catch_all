module Promise {
  fun reject (input : a) : Promise(a, b) {
    ``
  }
}

component Main {
  fun test : Promise(Never, String) {
    parallel {
      greeting =
        Promise.reject("x")

      a =
        "Hello"

      b =
        "World"
    } then {
      a + b
    } catch {
      "Hmm..."
    }
  }

  fun render : String {
    test()

    ""
  }
}
--------------------------------------------------------------------------------
const B = new(class extends _M {
  b(f) {
    return;
  }
});

class A extends _C {
  a() {
    return (async () => {
      let _ = null;

      try {
        let c = null;
        let d = null;
        let e = null;

        await Promise.all([
          (async () => {
            c = await B.b(`x`)
          })(),
          (async () => {
            d = await `Hello`
          })(),
          (async () => {
            e = await `World`
          })()
        ]);

        _ = d + e;
      } catch (_error) {
        if (!(_error instanceof DoError)) {
          return `Hmm...`
        }
      };

      return _;
    })();
  }

  render() {
    this.a();
    return ``;
  }
};

A.displayName = "Main";
