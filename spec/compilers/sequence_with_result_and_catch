module Result {
  fun error (input : a) : Result(a, b) {
    `new Err(arguments[0])`
  }
}

component Main {
  fun test : Promise(Never, String) {
    sequence {
      Result.error("")

      "test"
    } catch String => error {
      "test"
    }
  }

  fun render : Html {
    test()

    <div/>
  }
}
--------------------------------------------------------------------------------
const B = new(class extends _M {
  b(d) {
    return (new Err(arguments[0]));
  }
});

class A extends _C {
  a() {
    return (async () => {
      let _ = null;

      try {
        let _0 = B.b(``);

        if (_0 instanceof Err) {
          let _error = _0._0;

          let c = _error;
          _ = `test`;
          throw new DoError();
        };

        _0._0;

        _ = await `test`;
      } catch (_error) {
        if (!(_error instanceof DoError)) {
          console.warn(`Unhandled error in sequence expression:`);
          console.warn(_error);
        }
      };

      return _;
    })();
  }

  render() {
    this.a();
    return _h("div", {});
  }
};

A.displayName = "Main";
